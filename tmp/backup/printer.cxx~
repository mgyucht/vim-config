/*
 * printer.cxx
 * -----------
 *
 *  printer.cxx contains the implementation of the Printer class.
 */

#include "printer.hxx"
#include <boost/lexical_cast.hpp>
#include <iostream>

Printer::Printer()
{

}

int Printer::print_positions(Simulation sim, int timestep)
{
  std::string pos_file_name_temp = pos_file_name + "_" + boost::lexical_cast<std::string>(timestep);
  std::vector<Node> *temp_node_vec = &(sim.node_network);
  std::ofstream position_file(pos_file_name_temp.c_str(), std::ios::trunc);

  if (position_file.is_open())
  {
    for (;false;/* iterator over temp_node_vec */)
    {
      position_file << /* things << */ std::endl;
    }
  } else
  {
    return ERRORPOSFILE;
  }

  position_file.close();
  return 0;
}

int Printer::clear_data_file()
{
  std::string data_file_name_temp = data_file_name + extension;
  std::ofstream data_file(data_file_name_temp.c_str(), std::ios::trunc);

  data_file.close();
  return 0;
}

int Printer::print_data_file(Simulation sim)
{
  std::string data_file_name_temp = data_file_name + extension;
  std::ofstream data_file(data_file_name_temp.c_str(), std::ios::trunc);

  if (data_file.is_open())
  {
    for (int i = 0; i < sim.stress.size(); i++)
    {
      std::string time = boost::lexical_cast<std::string>(i * sim.dt);
      data_file << sim.stress[i] << "," << sim.strain[i] << ",";
      data_file << time;
    }
  } else
  {
    return ERRORDATAFILE;
  }

  data_file.close();
  return 0;
}
