/*
ID: myucht1
LANG: C++
PROG: milk3
*/

#include <fstream>
#include <algorithm>
#include <iostream>
#include <set>
#include <vector>
#include <cassert>
using namespace std;

int capacity[3];
bool vols[21][21][21] = {false};
bool sols[21] = {false};

void pour(int vol1, int vol2, int &bkt1, int &bkt2, int ind2)
{
  if (vol1 <= capacity[ind2] - vol2)
  {
    bkt2 = vol2 + vol1;
    bkt1 = 0;
  } else
  {
    bkt1 = vol1 - capacity[ind2] + vol2;
    bkt2 = capacity[ind2];
  }
  assert(bkt1 >= 0 && bkt2 >= 0);
}

void check_vol(int a, int c)
{
  if (a == 0)
    sols[c] = true;
}

void dfs(int *bkt)
{
  int bvals[3] = {bkt[0], bkt[1], bkt[2]};
  if (vols[bvals[0]][bvals[1]][bvals[2]])
    return;
  else vols[bvals[0]][bvals[1]][bvals[2]] = true;

  pour(bkt[0], bkt[1], bvals[0], bvals[1], 1);
  check_vol(bvals[0], bvals[2]);
  dfs(bvals);
  bvals[0] = bkt[0];
  bvals[1] = bkt[1];
  bvals[2] = bkt[2];
  pour(bkt[0], bkt[2], bvals[0], bvals[2], 2);
  check_vol(bvals[0], bvals[2]);
  dfs(bvals);
  bvals[0] = bkt[0];
  bvals[1] = bkt[1];
  bvals[2] = bkt[2];
  pour(bkt[1], bkt[2], bvals[1], bvals[2], 2);
  check_vol(bvals[0], bvals[2]);
  dfs(bvals);
  bvals[0] = bkt[0];
  bvals[1] = bkt[1];
  bvals[2] = bkt[2];
  pour(bkt[1], bkt[0], bvals[1], bvals[0], 0);
  check_vol(bvals[0], bvals[2]);
  dfs(bvals);
  bvals[0] = bkt[0];
  bvals[1] = bkt[1];
  bvals[2] = bkt[2];
  pour(bkt[2], bkt[1], bvals[2], bvals[1], 1);
  check_vol(bvals[0], bvals[2]);
  dfs(bvals);
  bvals[0] = bkt[0];
  bvals[1] = bkt[1];
  bvals[2] = bkt[2];
  pour(bkt[2], bkt[0], bvals[2], bvals[0], 0);
  check_vol(bvals[0], bvals[2]);
  dfs(bvals);
}

int main()
{
  ifstream input("milk3.in");
  ofstream output("milk3.out");

  input >> capacity[0] >> capacity[1] >> capacity[2];
  int arr[3] = {0, 0, capacity[2]};
  dfs(arr);

  int i;
  for (i = 0; i < 21; i++)
  {
    if (sols[i])
    {
      output << i;
      cout << i;
      break;
    }
  }

  ++i;

  for (; i < 21; i++)
  {
    if (sols[i])
    {
      output << " " << i;
      cout << " " << i;
    }
  }
  output << endl;
  cout << endl;

  return 0;
}
